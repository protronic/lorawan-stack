// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lorawan-stack/api/secrets.proto

package ttnpb

import (
	bytes "bytes"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	golang_proto "github.com/golang/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Secrets contains key-value pairs of secret values as well as the ID of the encryption key.
type Secrets struct {
	Values map[string][]byte `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// ID of the Key used to encrypt the secret.
	KeyID                string   `protobuf:"bytes,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Secrets) Reset()      { *m = Secrets{} }
func (*Secrets) ProtoMessage() {}
func (*Secrets) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c9d796b7f7ca235, []int{0}
}
func (m *Secrets) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Secrets) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Secrets.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Secrets) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Secrets.Merge(m, src)
}
func (m *Secrets) XXX_Size() int {
	return m.Size()
}
func (m *Secrets) XXX_DiscardUnknown() {
	xxx_messageInfo_Secrets.DiscardUnknown(m)
}

var xxx_messageInfo_Secrets proto.InternalMessageInfo

func (m *Secrets) GetValues() map[string][]byte {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *Secrets) GetKeyID() string {
	if m != nil {
		return m.KeyID
	}
	return ""
}

func init() {
	proto.RegisterType((*Secrets)(nil), "ttn.lorawan.v3.Secrets")
	golang_proto.RegisterType((*Secrets)(nil), "ttn.lorawan.v3.Secrets")
	proto.RegisterMapType((map[string][]byte)(nil), "ttn.lorawan.v3.Secrets.ValuesEntry")
	golang_proto.RegisterMapType((map[string][]byte)(nil), "ttn.lorawan.v3.Secrets.ValuesEntry")
}

func init() { proto.RegisterFile("lorawan-stack/api/secrets.proto", fileDescriptor_8c9d796b7f7ca235) }
func init() {
	golang_proto.RegisterFile("lorawan-stack/api/secrets.proto", fileDescriptor_8c9d796b7f7ca235)
}

var fileDescriptor_8c9d796b7f7ca235 = []byte{
	// 440 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x92, 0x31, 0x68, 0x14, 0x41,
	0x14, 0x86, 0xe7, 0x25, 0xdc, 0x49, 0x36, 0x22, 0xb2, 0x58, 0x1c, 0x57, 0xbc, 0x1c, 0xe7, 0x21,
	0x17, 0xc8, 0xce, 0xc8, 0x5d, 0x63, 0xd2, 0x04, 0x0f, 0x2d, 0x82, 0xdd, 0x09, 0x16, 0x86, 0x28,
	0x7b, 0x7b, 0xe3, 0xde, 0xb2, 0xe7, 0xcc, 0xb2, 0x3b, 0xb7, 0x71, 0x15, 0x21, 0x65, 0x4a, 0x4b,
	0xb1, 0xb2, 0x11, 0x52, 0xa6, 0x4c, 0x99, 0x32, 0x65, 0xec, 0x52, 0x49, 0x76, 0xa6, 0x49, 0x99,
	0x32, 0x58, 0x49, 0x66, 0x4f, 0x48, 0x48, 0xf7, 0x7f, 0xf0, 0xbd, 0xff, 0x3d, 0x98, 0x71, 0x56,
	0xa6, 0x32, 0xf5, 0x77, 0x7d, 0xe1, 0x65, 0xca, 0x0f, 0x62, 0xe6, 0x27, 0x11, 0xcb, 0x78, 0x90,
	0x72, 0x95, 0xd1, 0x24, 0x95, 0x4a, 0xba, 0x0f, 0x94, 0x12, 0x74, 0x2e, 0xd1, 0xbc, 0xdf, 0xf4,
	0xc2, 0x48, 0x4d, 0x66, 0x23, 0x1a, 0xc8, 0x8f, 0x2c, 0x94, 0xa1, 0x64, 0x56, 0x1b, 0xcd, 0x3e,
	0x58, 0xb2, 0x60, 0x53, 0x35, 0xde, 0x7c, 0x7e, 0x43, 0xe7, 0x22, 0x97, 0x45, 0x92, 0xca, 0x4f,
	0x45, 0x35, 0x14, 0x78, 0x21, 0x17, 0x5e, 0xee, 0x4f, 0xa3, 0xb1, 0xaf, 0x38, 0xbb, 0x13, 0xaa,
	0x8a, 0xf6, 0x6f, 0x70, 0xee, 0xbd, 0xae, 0x6e, 0x72, 0x23, 0xa7, 0x9e, 0xfb, 0xd3, 0x19, 0xcf,
	0x1a, 0xd0, 0x5a, 0xec, 0x2e, 0xf7, 0x1e, 0xd3, 0xdb, 0xe7, 0xd1, 0xb9, 0x48, 0xdf, 0x58, 0xeb,
	0xa5, 0x50, 0x69, 0x31, 0x58, 0xfb, 0x3b, 0x58, 0xfd, 0x01, 0x4f, 0xda, 0x9d, 0xb4, 0xdd, 0xe8,
	0xf4, 0xf0, 0xdd, 0xb6, 0xef, 0x7d, 0x7e, 0xea, 0xad, 0xef, 0x74, 0x37, 0x37, 0xb6, 0xbd, 0x9d,
	0xcd, 0xff, 0xb8, 0xfa, 0xa5, 0xb7, 0xf6, 0xb5, 0x33, 0x9c, 0x2f, 0x70, 0x5b, 0x4e, 0x3d, 0xe6,
	0xc5, 0xfb, 0x68, 0xdc, 0x58, 0x68, 0x41, 0x77, 0x69, 0xb0, 0xa4, 0xff, 0xac, 0xd4, 0x5e, 0xf1,
	0x62, 0xeb, 0xc5, 0xb0, 0x16, 0xf3, 0x62, 0x6b, 0xdc, 0x5c, 0x77, 0x96, 0x6f, 0xac, 0x71, 0x1f,
	0x3a, 0x8b, 0x31, 0x2f, 0x1a, 0x70, 0x6d, 0x0f, 0xaf, 0xa3, 0xfb, 0xc8, 0xa9, 0xd9, 0x32, 0xdb,
	0x70, 0x7f, 0x58, 0xc1, 0xc6, 0xc2, 0x33, 0x18, 0xfc, 0x82, 0x93, 0x12, 0xe1, 0xb4, 0x44, 0x38,
	0x2b, 0x91, 0x9c, 0x97, 0x48, 0x2e, 0x4a, 0x24, 0x97, 0x25, 0x92, 0xab, 0x12, 0x61, 0x4f, 0x23,
	0xec, 0x6b, 0x24, 0x07, 0x1a, 0xe1, 0x50, 0x23, 0x39, 0xd2, 0x48, 0x8e, 0x35, 0x92, 0x13, 0x8d,
	0x70, 0xaa, 0x11, 0xce, 0x34, 0x92, 0x73, 0x8d, 0x70, 0xa1, 0x91, 0x5c, 0x6a, 0x84, 0x2b, 0x8d,
	0x64, 0xcf, 0x20, 0xd9, 0x37, 0x08, 0xdf, 0x0c, 0x92, 0xef, 0x06, 0xe1, 0xa7, 0x41, 0x72, 0x60,
	0x90, 0x1c, 0x1a, 0x84, 0x23, 0x83, 0x70, 0x6c, 0x10, 0xde, 0xb2, 0x50, 0x52, 0x35, 0xe1, 0x6a,
	0x12, 0x89, 0x30, 0xa3, 0x82, 0xab, 0x5d, 0x99, 0xc6, 0xec, 0xf6, 0x17, 0xc8, 0xfb, 0x2c, 0x89,
	0x43, 0xa6, 0x94, 0x48, 0x46, 0xa3, 0xba, 0x7d, 0x82, 0xfe, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x8a, 0xe1, 0x89, 0xe4, 0x27, 0x02, 0x00, 0x00,
}

func (this *Secrets) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Secrets)
	if !ok {
		that2, ok := that.(Secrets)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Values) != len(that1.Values) {
		return false
	}
	for i := range this.Values {
		if !bytes.Equal(this.Values[i], that1.Values[i]) {
			return false
		}
	}
	if this.KeyID != that1.KeyID {
		return false
	}
	return true
}
func (m *Secrets) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Secrets) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Secrets) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.KeyID) > 0 {
		i -= len(m.KeyID)
		copy(dAtA[i:], m.KeyID)
		i = encodeVarintSecrets(dAtA, i, uint64(len(m.KeyID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Values) > 0 {
		for k := range m.Values {
			v := m.Values[k]
			baseI := i
			if len(v) > 0 {
				i -= len(v)
				copy(dAtA[i:], v)
				i = encodeVarintSecrets(dAtA, i, uint64(len(v)))
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintSecrets(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintSecrets(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintSecrets(dAtA []byte, offset int, v uint64) int {
	offset -= sovSecrets(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedSecrets(r randySecrets, easy bool) *Secrets {
	this := &Secrets{}
	if r.Intn(5) != 0 {
		v1 := r.Intn(10)
		this.Values = make(map[string][]byte)
		for i := 0; i < v1; i++ {
			v2 := r.Intn(100)
			v3 := randStringSecrets(r)
			this.Values[v3] = make([]byte, v2)
			for i := 0; i < v2; i++ {
				this.Values[v3][i] = byte(r.Intn(256))
			}
		}
	}
	this.KeyID = randStringSecrets(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randySecrets interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneSecrets(r randySecrets) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringSecrets(r randySecrets) string {
	v4 := r.Intn(100)
	tmps := make([]rune, v4)
	for i := 0; i < v4; i++ {
		tmps[i] = randUTF8RuneSecrets(r)
	}
	return string(tmps)
}
func randUnrecognizedSecrets(r randySecrets, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldSecrets(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldSecrets(dAtA []byte, r randySecrets, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateSecrets(dAtA, uint64(key))
		v5 := r.Int63()
		if r.Intn(2) == 0 {
			v5 *= -1
		}
		dAtA = encodeVarintPopulateSecrets(dAtA, uint64(v5))
	case 1:
		dAtA = encodeVarintPopulateSecrets(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateSecrets(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateSecrets(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateSecrets(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateSecrets(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(v&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Secrets) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Values) > 0 {
		for k, v := range m.Values {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovSecrets(uint64(len(v)))
			}
			mapEntrySize := 1 + len(k) + sovSecrets(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovSecrets(uint64(mapEntrySize))
		}
	}
	l = len(m.KeyID)
	if l > 0 {
		n += 1 + l + sovSecrets(uint64(l))
	}
	return n
}

func sovSecrets(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSecrets(x uint64) (n int) {
	return sovSecrets((x << 1) ^ uint64((int64(x) >> 63)))
}
func (this *Secrets) String() string {
	if this == nil {
		return "nil"
	}
	keysForValues := make([]string, 0, len(this.Values))
	for k := range this.Values {
		keysForValues = append(keysForValues, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForValues)
	mapStringForValues := "map[string][]byte{"
	for _, k := range keysForValues {
		mapStringForValues += fmt.Sprintf("%v: %v,", k, this.Values[k])
	}
	mapStringForValues += "}"
	s := strings.Join([]string{`&Secrets{`,
		`Values:` + mapStringForValues + `,`,
		`KeyID:` + fmt.Sprintf("%v", this.KeyID) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringSecrets(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Secrets) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecrets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Secrets: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Secrets: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecrets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecrets
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecrets
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Values == nil {
				m.Values = make(map[string][]byte)
			}
			var mapkey string
			mapvalue := []byte{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSecrets
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSecrets
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthSecrets
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthSecrets
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSecrets
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthSecrets
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex < 0 {
						return ErrInvalidLengthSecrets
					}
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = make([]byte, mapbyteLen)
					copy(mapvalue, dAtA[iNdEx:postbytesIndex])
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSecrets(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthSecrets
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Values[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecrets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecrets
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecrets
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecrets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecrets
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSecrets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSecrets(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSecrets
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSecrets
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSecrets
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSecrets
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSecrets
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSecrets
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSecrets        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSecrets          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSecrets = fmt.Errorf("proto: unexpected end of group")
)
