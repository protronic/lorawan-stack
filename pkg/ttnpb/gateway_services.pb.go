// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lorawan-stack/api/gateway_services.proto

package ttnpb

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PullGatewayConfigurationRequest struct {
	GatewayIdentifiers   `protobuf:"bytes,1,opt,name=gateway_ids,json=gatewayIds,proto3,embedded=gateway_ids" json:"gateway_ids"`
	FieldMask            types.FieldMask `protobuf:"bytes,2,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *PullGatewayConfigurationRequest) Reset()      { *m = PullGatewayConfigurationRequest{} }
func (*PullGatewayConfigurationRequest) ProtoMessage() {}
func (*PullGatewayConfigurationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_72fc70018c9e7608, []int{0}
}
func (m *PullGatewayConfigurationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PullGatewayConfigurationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PullGatewayConfigurationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PullGatewayConfigurationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullGatewayConfigurationRequest.Merge(m, src)
}
func (m *PullGatewayConfigurationRequest) XXX_Size() int {
	return m.Size()
}
func (m *PullGatewayConfigurationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PullGatewayConfigurationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PullGatewayConfigurationRequest proto.InternalMessageInfo

func (m *PullGatewayConfigurationRequest) GetFieldMask() types.FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return types.FieldMask{}
}

func init() {
	proto.RegisterType((*PullGatewayConfigurationRequest)(nil), "ttn.lorawan.v3.PullGatewayConfigurationRequest")
	golang_proto.RegisterType((*PullGatewayConfigurationRequest)(nil), "ttn.lorawan.v3.PullGatewayConfigurationRequest")
}

func init() {
	proto.RegisterFile("lorawan-stack/api/gateway_services.proto", fileDescriptor_72fc70018c9e7608)
}
func init() {
	golang_proto.RegisterFile("lorawan-stack/api/gateway_services.proto", fileDescriptor_72fc70018c9e7608)
}

var fileDescriptor_72fc70018c9e7608 = []byte{
	// 1099 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x4d, 0x6c, 0xd4, 0x46,
	0x14, 0xf6, 0xa4, 0x28, 0x6a, 0x26, 0xb4, 0x11, 0xd3, 0x96, 0x46, 0xdb, 0x32, 0xa1, 0x86, 0x16,
	0x08, 0x5d, 0x3b, 0x6c, 0x28, 0x42, 0xfd, 0x51, 0x45, 0x52, 0x58, 0x45, 0x05, 0x29, 0xda, 0x40,
	0x0f, 0x7b, 0x89, 0xbc, 0xbb, 0xb3, 0xce, 0x68, 0x1d, 0xcf, 0xd6, 0x33, 0xbb, 0x69, 0x1a, 0x45,
	0x8a, 0x38, 0x54, 0x50, 0xa9, 0x12, 0x52, 0x55, 0xb5, 0x97, 0x4a, 0x5c, 0x2a, 0x71, 0xa4, 0x3d,
	0x71, 0xe4, 0x98, 0x63, 0x24, 0x2e, 0x39, 0x21, 0xd6, 0xcb, 0x81, 0x43, 0x0f, 0x1c, 0xe9, 0xad,
	0xf2, 0xd8, 0x4e, 0xbc, 0xf6, 0x3a, 0xb1, 0x25, 0x6e, 0xf6, 0xbc, 0x6f, 0xde, 0xfb, 0xde, 0xcf,
	0x7c, 0x33, 0xf0, 0xac, 0xc5, 0x1c, 0x63, 0xcd, 0xb0, 0x8b, 0x5c, 0x18, 0xf5, 0x96, 0x6e, 0xb4,
	0xa9, 0x6e, 0x1a, 0x82, 0xac, 0x19, 0xeb, 0xcb, 0x9c, 0x38, 0x5d, 0x5a, 0x27, 0x5c, 0x6b, 0x3b,
	0x4c, 0x30, 0xf4, 0xb6, 0x10, 0xb6, 0x16, 0xa0, 0xb5, 0xee, 0x6c, 0xa1, 0x68, 0x52, 0xb1, 0xd2,
	0xa9, 0x69, 0x75, 0xb6, 0xaa, 0x9b, 0xcc, 0x64, 0xba, 0x84, 0xd5, 0x3a, 0x4d, 0xf9, 0x27, 0x7f,
	0xe4, 0x97, 0xbf, 0xbd, 0xf0, 0xa1, 0xc9, 0x98, 0x69, 0x11, 0x19, 0xc1, 0xb0, 0x6d, 0x26, 0x0c,
	0x41, 0x99, 0x1d, 0x38, 0x2f, 0x7c, 0x10, 0x58, 0xf7, 0x7c, 0x90, 0xd5, 0xb6, 0x58, 0x0f, 0x8c,
	0x27, 0xe3, 0xc6, 0x26, 0x25, 0x56, 0x63, 0x79, 0xd5, 0xe0, 0xad, 0x00, 0x31, 0x95, 0x9a, 0x45,
	0x00, 0x38, 0x95, 0x04, 0xd0, 0x06, 0xb1, 0x05, 0x6d, 0x52, 0xe2, 0x84, 0x24, 0x70, 0x12, 0xe4,
	0x50, 0x73, 0x45, 0x04, 0x76, 0xf5, 0x6f, 0x00, 0xa7, 0x16, 0x3b, 0x96, 0x55, 0xf6, 0x5d, 0xcf,
	0x33, 0xbb, 0x49, 0xcd, 0x8e, 0x23, 0x13, 0xa9, 0x90, 0xef, 0x3b, 0x84, 0x0b, 0x74, 0x03, 0x8e,
	0x87, 0xf5, 0xa3, 0x0d, 0x3e, 0x09, 0x4e, 0x82, 0xb3, 0xe3, 0x25, 0x55, 0x1b, 0xac, 0x9d, 0x16,
	0x78, 0x58, 0xd8, 0xa7, 0x30, 0xf7, 0xe6, 0xf6, 0xd3, 0x29, 0x65, 0xe7, 0xe9, 0x14, 0xa8, 0x40,
	0x33, 0xb4, 0x72, 0xf4, 0x35, 0x84, 0xfb, 0xc9, 0x4e, 0x8e, 0x48, 0x6f, 0x05, 0xcd, 0xaf, 0x87,
	0x16, 0xd6, 0x43, 0xbb, 0xe6, 0x41, 0x6e, 0x18, 0xbc, 0x35, 0x77, 0xc4, 0xf3, 0x52, 0x19, 0x6b,
	0x86, 0x0b, 0xa5, 0x7f, 0xc6, 0xe0, 0x44, 0x10, 0xad, 0x42, 0x4c, 0xca, 0x85, 0xb3, 0x8e, 0x9e,
	0x00, 0x38, 0x3a, 0xef, 0x10, 0x43, 0x10, 0x74, 0x3a, 0xce, 0xcc, 0x5f, 0xdf, 0xdb, 0x21, 0x93,
	0x2a, 0xbc, 0x9f, 0xc2, 0x5f, 0xbd, 0x0b, 0x6e, 0x3f, 0x79, 0xfe, 0xeb, 0xc8, 0x6d, 0xa0, 0xea,
	0x7a, 0x87, 0x13, 0x87, 0xeb, 0x1b, 0x75, 0x66, 0x59, 0x46, 0x8d, 0x39, 0x86, 0x60, 0x8e, 0xe6,
	0xad, 0x79, 0x75, 0x08, 0x3f, 0x36, 0xc3, 0xb6, 0xf0, 0xcf, 0xc1, 0x74, 0xf5, 0xba, 0x5a, 0xd6,
	0x99, 0x63, 0x1a, 0x36, 0xfd, 0xd1, 0x1f, 0x86, 0xd8, 0xee, 0xa8, 0x4d, 0x7a, 0x89, 0x2d, 0x0c,
	0x78, 0x43, 0xab, 0xf0, 0x8d, 0x32, 0x11, 0xe8, 0xa3, 0x04, 0x57, 0x22, 0xb2, 0xa6, 0x33, 0x2d,
	0xb3, 0x39, 0x8d, 0xd4, 0x3d, 0xc7, 0xfa, 0x46, 0xa4, 0x9b, 0xda, 0xfe, 0xf7, 0x26, 0xb2, 0xe1,
	0xbb, 0x65, 0x22, 0x22, 0x1d, 0xbc, 0xc6, 0x9c, 0xab, 0xb7, 0x16, 0x50, 0x29, 0x3d, 0x7e, 0x02,
	0x1c, 0x12, 0xca, 0x30, 0x1f, 0x68, 0x17, 0xc0, 0x23, 0xd7, 0x29, 0x17, 0xe8, 0x54, 0x1c, 0xec,
	0xad, 0x06, 0x1b, 0x78, 0xe8, 0x71, 0x32, 0xc5, 0x23, 0x57, 0xef, 0xf9, 0x2d, 0xbb, 0x0b, 0xd0,
	0xd8, 0x5e, 0x96, 0xd5, 0x0b, 0x28, 0x6f, 0xff, 0xaa, 0x0b, 0xe8, 0x75, 0x35, 0x0f, 0x75, 0xe1,
	0xe8, 0xad, 0x76, 0x63, 0xe8, 0x38, 0xfa, 0xeb, 0x59, 0xfb, 0x57, 0x94, 0xa9, 0x9d, 0x29, 0x0c,
	0xe9, 0x9f, 0x16, 0xeb, 0x9f, 0x37, 0x31, 0x0d, 0x38, 0xfa, 0x0d, 0xb1, 0x88, 0x20, 0x28, 0x43,
	0x03, 0x0a, 0xc7, 0x13, 0xc7, 0xee, 0xaa, 0xa7, 0x51, 0x2a, 0x96, 0x41, 0x27, 0xa7, 0x8f, 0x0f,
	0x1d, 0x9a, 0x4d, 0xf4, 0x0b, 0x80, 0x68, 0x49, 0x30, 0x27, 0xcc, 0x62, 0x89, 0xd4, 0x1d, 0x22,
	0xd0, 0xb9, 0x78, 0xc8, 0x24, 0x26, 0xcc, 0x37, 0x2d, 0xf2, 0x45, 0x19, 0x59, 0x2b, 0x9d, 0x3b,
	0x7c, 0x5c, 0x75, 0x2e, 0x3d, 0x7a, 0x59, 0xdf, 0x07, 0xf0, 0xbd, 0x0a, 0x11, 0x0e, 0x25, 0xdd,
	0x18, 0xa5, 0x4f, 0xe3, 0x94, 0x86, 0xc2, 0x42, 0x56, 0x9f, 0xa4, 0xd4, 0xcc, 0x47, 0x2d, 0x5a,
	0x06, 0xb5, 0x6f, 0x92, 0x1f, 0x84, 0x7a, 0x41, 0xb2, 0x3c, 0x8f, 0xb2, 0xb3, 0x2c, 0x3d, 0x87,
	0xf0, 0xad, 0xc0, 0xdb, 0x95, 0x7a, 0x9d, 0x70, 0x8e, 0x18, 0x84, 0xde, 0x98, 0x57, 0xa4, 0x1c,
	0x67, 0x6c, 0x57, 0x3c, 0x19, 0xb9, 0x57, 0xfd, 0x58, 0xd2, 0x99, 0x42, 0x27, 0x86, 0xb7, 0x2b,
	0x50, 0x7c, 0xf4, 0x33, 0x80, 0x47, 0x7d, 0x2d, 0xbc, 0xb2, 0xb8, 0xf0, 0x2d, 0x59, 0x47, 0xd3,
	0x07, 0x2a, 0xa5, 0x0f, 0xda, 0x6f, 0x58, 0x0c, 0xeb, 0x9b, 0xd5, 0x4b, 0x32, 0xf6, 0x8c, 0x7a,
	0x3e, 0x43, 0x29, 0x8c, 0x36, 0x2d, 0xb6, 0x88, 0x2f, 0x6d, 0x3f, 0x01, 0x38, 0xee, 0xa5, 0xef,
	0xbb, 0xe1, 0xc9, 0xd9, 0x89, 0x48, 0x40, 0x80, 0x49, 0x3d, 0x2b, 0x81, 0x5d, 0x9d, 0x95, 0x5c,
	0x8a, 0x28, 0x0f, 0x17, 0xaf, 0x2a, 0x63, 0x65, 0x12, 0xf0, 0x40, 0x67, 0xd2, 0xa5, 0x2e, 0x5b,
	0x3d, 0xbe, 0x94, 0x1c, 0x2e, 0xa1, 0x8b, 0x39, 0x38, 0xe8, 0x1b, 0x2d, 0xe2, 0x1f, 0xac, 0xdf,
	0x01, 0x3c, 0xea, 0xeb, 0x43, 0x5a, 0x8b, 0x06, 0xd4, 0x23, 0x1b, 0xa5, 0x79, 0x49, 0xe9, 0xab,
	0xc2, 0xe5, 0x5c, 0x94, 0x8c, 0x36, 0x5d, 0x6e, 0x11, 0x4f, 0x64, 0xa4, 0xb0, 0xfc, 0x3b, 0x02,
	0x27, 0xca, 0x44, 0xcc, 0x47, 0xf4, 0x10, 0x15, 0xd3, 0x8b, 0x15, 0xc5, 0x85, 0xfc, 0x86, 0xd5,
	0x76, 0x10, 0xc7, 0xdb, 0xcc, 0xe6, 0x44, 0xdd, 0x1a, 0x91, 0x8c, 0xff, 0x03, 0x48, 0xcf, 0x40,
	0x39, 0x2a, 0xd1, 0xd5, 0xef, 0xd0, 0xcd, 0x9c, 0x5b, 0xe4, 0x25, 0x71, 0xd8, 0x1d, 0x51, 0xb5,
	0x91, 0x95, 0xd7, 0x6f, 0xf4, 0x72, 0xc8, 0x7b, 0x91, 0xa0, 0xdf, 0x00, 0x9c, 0x58, 0x3a, 0xac,
	0xdc, 0x4b, 0x07, 0x96, 0x3b, 0x4d, 0x62, 0xbf, 0x90, 0xc5, 0xfd, 0xac, 0x30, 0x93, 0x33, 0x21,
	0x79, 0x6c, 0xff, 0x04, 0xf0, 0x98, 0x77, 0x32, 0xa3, 0x01, 0x39, 0xd2, 0x0f, 0x38, 0xbc, 0x03,
	0xc8, 0x90, 0xdb, 0x89, 0x84, 0xf2, 0x44, 0x51, 0xea, 0x65, 0x49, 0xb1, 0x84, 0x72, 0x53, 0x2c,
	0x75, 0xe1, 0x3b, 0x89, 0xa7, 0x2c, 0x73, 0xd0, 0x32, 0x3c, 0xe6, 0xbd, 0x72, 0x07, 0x9e, 0xb7,
	0x49, 0xd6, 0x87, 0x3c, 0x84, 0x53, 0x2f, 0xe9, 0x19, 0x30, 0xf7, 0x17, 0xd8, 0xee, 0x61, 0xb0,
	0xd3, 0xc3, 0x60, 0xb7, 0x87, 0x95, 0x67, 0x3d, 0xac, 0xbc, 0xe8, 0x61, 0xe5, 0x65, 0x0f, 0x2b,
	0xaf, 0x7a, 0x18, 0x6c, 0xb9, 0x18, 0xdc, 0x71, 0xb1, 0xf2, 0xc0, 0xc5, 0xe0, 0xa1, 0x8b, 0x95,
	0x47, 0x2e, 0x56, 0x1e, 0xbb, 0x58, 0xd9, 0x76, 0x31, 0xd8, 0x71, 0x31, 0xd8, 0x75, 0xb1, 0xf2,
	0xcc, 0xc5, 0xe0, 0x85, 0x8b, 0x95, 0x97, 0x2e, 0x06, 0xaf, 0x5c, 0xac, 0x6c, 0xf5, 0xb1, 0x72,
	0xa7, 0x8f, 0xc1, 0xbd, 0x3e, 0x56, 0xfe, 0xe8, 0x63, 0x70, 0xbf, 0x8f, 0x95, 0x07, 0x7d, 0xac,
	0x3c, 0xec, 0x63, 0xf0, 0xa8, 0x8f, 0xc1, 0xe3, 0x3e, 0x06, 0x55, 0xdd, 0x64, 0x9a, 0x58, 0x21,
	0x62, 0x85, 0xda, 0x26, 0xd7, 0x6c, 0x22, 0xd6, 0x98, 0xd3, 0xd2, 0x07, 0xdf, 0xfc, 0xdd, 0x59,
	0xbd, 0xdd, 0x32, 0x75, 0x21, 0xec, 0x76, 0xad, 0x36, 0x2a, 0x87, 0x61, 0xf6, 0xff, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xee, 0x92, 0x5c, 0x3e, 0x24, 0x0d, 0x00, 0x00,
}

func (this *PullGatewayConfigurationRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PullGatewayConfigurationRequest)
	if !ok {
		that2, ok := that.(PullGatewayConfigurationRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GatewayIdentifiers.Equal(&that1.GatewayIdentifiers) {
		return false
	}
	if !this.FieldMask.Equal(&that1.FieldMask) {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GatewayRegistryClient is the client API for GatewayRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GatewayRegistryClient interface {
	// Create a new gateway. This also sets the given organization or user as
	// first collaborator with all possible rights.
	Create(ctx context.Context, in *CreateGatewayRequest, opts ...grpc.CallOption) (*Gateway, error)
	// Get the gateway with the given identifiers, selecting the fields given
	// by the field mask. The method may return more or less fields, depending on
	// the rights of the caller.
	Get(ctx context.Context, in *GetGatewayRequest, opts ...grpc.CallOption) (*Gateway, error)
	GetIdentifiersForEUI(ctx context.Context, in *GetGatewayIdentifiersForEUIRequest, opts ...grpc.CallOption) (*GatewayIdentifiers, error)
	// List gateways. See request message for details.
	List(ctx context.Context, in *ListGatewaysRequest, opts ...grpc.CallOption) (*Gateways, error)
	Update(ctx context.Context, in *UpdateGatewayRequest, opts ...grpc.CallOption) (*Gateway, error)
	Delete(ctx context.Context, in *GatewayIdentifiers, opts ...grpc.CallOption) (*types.Empty, error)
	// SetGatewayLBSSecret is used to encrypt a plaintext value and store it along with the gateway.
	// Requires the RIGHT_GATEWAY_WRITE_SECRET right.
	StoreGatewaySecret(ctx context.Context, in *StoreGatewaySecretRequest, opts ...grpc.CallOption) (*types.Empty, error)
	// RetrieveGatewaySecret is used to retrieve and decrypt the secret value.
	// Requires the RIGHT_GATEWAY_READ_SECRET right.
	RetrieveGatewaySecret(ctx context.Context, in *RetrieveGatewaySecretRequest, opts ...grpc.CallOption) (*GatewaySecretPlainText, error)
}

type gatewayRegistryClient struct {
	cc *grpc.ClientConn
}

func NewGatewayRegistryClient(cc *grpc.ClientConn) GatewayRegistryClient {
	return &gatewayRegistryClient{cc}
}

func (c *gatewayRegistryClient) Create(ctx context.Context, in *CreateGatewayRequest, opts ...grpc.CallOption) (*Gateway, error) {
	out := new(Gateway)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.GatewayRegistry/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayRegistryClient) Get(ctx context.Context, in *GetGatewayRequest, opts ...grpc.CallOption) (*Gateway, error) {
	out := new(Gateway)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.GatewayRegistry/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayRegistryClient) GetIdentifiersForEUI(ctx context.Context, in *GetGatewayIdentifiersForEUIRequest, opts ...grpc.CallOption) (*GatewayIdentifiers, error) {
	out := new(GatewayIdentifiers)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.GatewayRegistry/GetIdentifiersForEUI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayRegistryClient) List(ctx context.Context, in *ListGatewaysRequest, opts ...grpc.CallOption) (*Gateways, error) {
	out := new(Gateways)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.GatewayRegistry/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayRegistryClient) Update(ctx context.Context, in *UpdateGatewayRequest, opts ...grpc.CallOption) (*Gateway, error) {
	out := new(Gateway)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.GatewayRegistry/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayRegistryClient) Delete(ctx context.Context, in *GatewayIdentifiers, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.GatewayRegistry/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayRegistryClient) StoreGatewaySecret(ctx context.Context, in *StoreGatewaySecretRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.GatewayRegistry/StoreGatewaySecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayRegistryClient) RetrieveGatewaySecret(ctx context.Context, in *RetrieveGatewaySecretRequest, opts ...grpc.CallOption) (*GatewaySecretPlainText, error) {
	out := new(GatewaySecretPlainText)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.GatewayRegistry/RetrieveGatewaySecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayRegistryServer is the server API for GatewayRegistry service.
type GatewayRegistryServer interface {
	// Create a new gateway. This also sets the given organization or user as
	// first collaborator with all possible rights.
	Create(context.Context, *CreateGatewayRequest) (*Gateway, error)
	// Get the gateway with the given identifiers, selecting the fields given
	// by the field mask. The method may return more or less fields, depending on
	// the rights of the caller.
	Get(context.Context, *GetGatewayRequest) (*Gateway, error)
	GetIdentifiersForEUI(context.Context, *GetGatewayIdentifiersForEUIRequest) (*GatewayIdentifiers, error)
	// List gateways. See request message for details.
	List(context.Context, *ListGatewaysRequest) (*Gateways, error)
	Update(context.Context, *UpdateGatewayRequest) (*Gateway, error)
	Delete(context.Context, *GatewayIdentifiers) (*types.Empty, error)
	// SetGatewayLBSSecret is used to encrypt a plaintext value and store it along with the gateway.
	// Requires the RIGHT_GATEWAY_WRITE_SECRET right.
	StoreGatewaySecret(context.Context, *StoreGatewaySecretRequest) (*types.Empty, error)
	// RetrieveGatewaySecret is used to retrieve and decrypt the secret value.
	// Requires the RIGHT_GATEWAY_READ_SECRET right.
	RetrieveGatewaySecret(context.Context, *RetrieveGatewaySecretRequest) (*GatewaySecretPlainText, error)
}

// UnimplementedGatewayRegistryServer can be embedded to have forward compatible implementations.
type UnimplementedGatewayRegistryServer struct {
}

func (*UnimplementedGatewayRegistryServer) Create(ctx context.Context, req *CreateGatewayRequest) (*Gateway, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedGatewayRegistryServer) Get(ctx context.Context, req *GetGatewayRequest) (*Gateway, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedGatewayRegistryServer) GetIdentifiersForEUI(ctx context.Context, req *GetGatewayIdentifiersForEUIRequest) (*GatewayIdentifiers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIdentifiersForEUI not implemented")
}
func (*UnimplementedGatewayRegistryServer) List(ctx context.Context, req *ListGatewaysRequest) (*Gateways, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedGatewayRegistryServer) Update(ctx context.Context, req *UpdateGatewayRequest) (*Gateway, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedGatewayRegistryServer) Delete(ctx context.Context, req *GatewayIdentifiers) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedGatewayRegistryServer) StoreGatewaySecret(ctx context.Context, req *StoreGatewaySecretRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreGatewaySecret not implemented")
}
func (*UnimplementedGatewayRegistryServer) RetrieveGatewaySecret(ctx context.Context, req *RetrieveGatewaySecretRequest) (*GatewaySecretPlainText, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveGatewaySecret not implemented")
}

func RegisterGatewayRegistryServer(s *grpc.Server, srv GatewayRegistryServer) {
	s.RegisterService(&_GatewayRegistry_serviceDesc, srv)
}

func _GatewayRegistry_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayRegistryServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.GatewayRegistry/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayRegistryServer).Create(ctx, req.(*CreateGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayRegistry_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayRegistryServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.GatewayRegistry/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayRegistryServer).Get(ctx, req.(*GetGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayRegistry_GetIdentifiersForEUI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGatewayIdentifiersForEUIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayRegistryServer).GetIdentifiersForEUI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.GatewayRegistry/GetIdentifiersForEUI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayRegistryServer).GetIdentifiersForEUI(ctx, req.(*GetGatewayIdentifiersForEUIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayRegistry_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGatewaysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayRegistryServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.GatewayRegistry/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayRegistryServer).List(ctx, req.(*ListGatewaysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayRegistry_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayRegistryServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.GatewayRegistry/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayRegistryServer).Update(ctx, req.(*UpdateGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayRegistry_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayRegistryServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.GatewayRegistry/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayRegistryServer).Delete(ctx, req.(*GatewayIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayRegistry_StoreGatewaySecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreGatewaySecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayRegistryServer).StoreGatewaySecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.GatewayRegistry/StoreGatewaySecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayRegistryServer).StoreGatewaySecret(ctx, req.(*StoreGatewaySecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayRegistry_RetrieveGatewaySecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveGatewaySecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayRegistryServer).RetrieveGatewaySecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.GatewayRegistry/RetrieveGatewaySecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayRegistryServer).RetrieveGatewaySecret(ctx, req.(*RetrieveGatewaySecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GatewayRegistry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.GatewayRegistry",
	HandlerType: (*GatewayRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _GatewayRegistry_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _GatewayRegistry_Get_Handler,
		},
		{
			MethodName: "GetIdentifiersForEUI",
			Handler:    _GatewayRegistry_GetIdentifiersForEUI_Handler,
		},
		{
			MethodName: "List",
			Handler:    _GatewayRegistry_List_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _GatewayRegistry_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _GatewayRegistry_Delete_Handler,
		},
		{
			MethodName: "StoreGatewaySecret",
			Handler:    _GatewayRegistry_StoreGatewaySecret_Handler,
		},
		{
			MethodName: "RetrieveGatewaySecret",
			Handler:    _GatewayRegistry_RetrieveGatewaySecret_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/gateway_services.proto",
}

// GatewayAccessClient is the client API for GatewayAccess service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GatewayAccessClient interface {
	ListRights(ctx context.Context, in *GatewayIdentifiers, opts ...grpc.CallOption) (*Rights, error)
	CreateAPIKey(ctx context.Context, in *CreateGatewayAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error)
	ListAPIKeys(ctx context.Context, in *ListGatewayAPIKeysRequest, opts ...grpc.CallOption) (*APIKeys, error)
	GetAPIKey(ctx context.Context, in *GetGatewayAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error)
	// Update the rights of an existing gateway API key. To generate an API key,
	// the CreateAPIKey should be used. To delete an API key, update it
	// with zero rights. It is required for the caller to have all assigned or/and removed rights.
	UpdateAPIKey(ctx context.Context, in *UpdateGatewayAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error)
	// Get the rights of a collaborator (member) of the gateway.
	// Pseudo-rights in the response (such as the "_ALL" right) are not expanded.
	GetCollaborator(ctx context.Context, in *GetGatewayCollaboratorRequest, opts ...grpc.CallOption) (*GetCollaboratorResponse, error)
	// Set the rights of a collaborator (member) on the gateway. It is required for the caller to
	// have all assigned or/and removed rights.
	// Setting a collaborator without rights, removes them.
	SetCollaborator(ctx context.Context, in *SetGatewayCollaboratorRequest, opts ...grpc.CallOption) (*types.Empty, error)
	ListCollaborators(ctx context.Context, in *ListGatewayCollaboratorsRequest, opts ...grpc.CallOption) (*Collaborators, error)
}

type gatewayAccessClient struct {
	cc *grpc.ClientConn
}

func NewGatewayAccessClient(cc *grpc.ClientConn) GatewayAccessClient {
	return &gatewayAccessClient{cc}
}

func (c *gatewayAccessClient) ListRights(ctx context.Context, in *GatewayIdentifiers, opts ...grpc.CallOption) (*Rights, error) {
	out := new(Rights)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.GatewayAccess/ListRights", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAccessClient) CreateAPIKey(ctx context.Context, in *CreateGatewayAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error) {
	out := new(APIKey)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.GatewayAccess/CreateAPIKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAccessClient) ListAPIKeys(ctx context.Context, in *ListGatewayAPIKeysRequest, opts ...grpc.CallOption) (*APIKeys, error) {
	out := new(APIKeys)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.GatewayAccess/ListAPIKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAccessClient) GetAPIKey(ctx context.Context, in *GetGatewayAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error) {
	out := new(APIKey)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.GatewayAccess/GetAPIKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAccessClient) UpdateAPIKey(ctx context.Context, in *UpdateGatewayAPIKeyRequest, opts ...grpc.CallOption) (*APIKey, error) {
	out := new(APIKey)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.GatewayAccess/UpdateAPIKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAccessClient) GetCollaborator(ctx context.Context, in *GetGatewayCollaboratorRequest, opts ...grpc.CallOption) (*GetCollaboratorResponse, error) {
	out := new(GetCollaboratorResponse)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.GatewayAccess/GetCollaborator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAccessClient) SetCollaborator(ctx context.Context, in *SetGatewayCollaboratorRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.GatewayAccess/SetCollaborator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayAccessClient) ListCollaborators(ctx context.Context, in *ListGatewayCollaboratorsRequest, opts ...grpc.CallOption) (*Collaborators, error) {
	out := new(Collaborators)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.GatewayAccess/ListCollaborators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayAccessServer is the server API for GatewayAccess service.
type GatewayAccessServer interface {
	ListRights(context.Context, *GatewayIdentifiers) (*Rights, error)
	CreateAPIKey(context.Context, *CreateGatewayAPIKeyRequest) (*APIKey, error)
	ListAPIKeys(context.Context, *ListGatewayAPIKeysRequest) (*APIKeys, error)
	GetAPIKey(context.Context, *GetGatewayAPIKeyRequest) (*APIKey, error)
	// Update the rights of an existing gateway API key. To generate an API key,
	// the CreateAPIKey should be used. To delete an API key, update it
	// with zero rights. It is required for the caller to have all assigned or/and removed rights.
	UpdateAPIKey(context.Context, *UpdateGatewayAPIKeyRequest) (*APIKey, error)
	// Get the rights of a collaborator (member) of the gateway.
	// Pseudo-rights in the response (such as the "_ALL" right) are not expanded.
	GetCollaborator(context.Context, *GetGatewayCollaboratorRequest) (*GetCollaboratorResponse, error)
	// Set the rights of a collaborator (member) on the gateway. It is required for the caller to
	// have all assigned or/and removed rights.
	// Setting a collaborator without rights, removes them.
	SetCollaborator(context.Context, *SetGatewayCollaboratorRequest) (*types.Empty, error)
	ListCollaborators(context.Context, *ListGatewayCollaboratorsRequest) (*Collaborators, error)
}

// UnimplementedGatewayAccessServer can be embedded to have forward compatible implementations.
type UnimplementedGatewayAccessServer struct {
}

func (*UnimplementedGatewayAccessServer) ListRights(ctx context.Context, req *GatewayIdentifiers) (*Rights, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRights not implemented")
}
func (*UnimplementedGatewayAccessServer) CreateAPIKey(ctx context.Context, req *CreateGatewayAPIKeyRequest) (*APIKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAPIKey not implemented")
}
func (*UnimplementedGatewayAccessServer) ListAPIKeys(ctx context.Context, req *ListGatewayAPIKeysRequest) (*APIKeys, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAPIKeys not implemented")
}
func (*UnimplementedGatewayAccessServer) GetAPIKey(ctx context.Context, req *GetGatewayAPIKeyRequest) (*APIKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPIKey not implemented")
}
func (*UnimplementedGatewayAccessServer) UpdateAPIKey(ctx context.Context, req *UpdateGatewayAPIKeyRequest) (*APIKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAPIKey not implemented")
}
func (*UnimplementedGatewayAccessServer) GetCollaborator(ctx context.Context, req *GetGatewayCollaboratorRequest) (*GetCollaboratorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollaborator not implemented")
}
func (*UnimplementedGatewayAccessServer) SetCollaborator(ctx context.Context, req *SetGatewayCollaboratorRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCollaborator not implemented")
}
func (*UnimplementedGatewayAccessServer) ListCollaborators(ctx context.Context, req *ListGatewayCollaboratorsRequest) (*Collaborators, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCollaborators not implemented")
}

func RegisterGatewayAccessServer(s *grpc.Server, srv GatewayAccessServer) {
	s.RegisterService(&_GatewayAccess_serviceDesc, srv)
}

func _GatewayAccess_ListRights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAccessServer).ListRights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.GatewayAccess/ListRights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAccessServer).ListRights(ctx, req.(*GatewayIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAccess_CreateAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGatewayAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAccessServer).CreateAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.GatewayAccess/CreateAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAccessServer).CreateAPIKey(ctx, req.(*CreateGatewayAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAccess_ListAPIKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGatewayAPIKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAccessServer).ListAPIKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.GatewayAccess/ListAPIKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAccessServer).ListAPIKeys(ctx, req.(*ListGatewayAPIKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAccess_GetAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGatewayAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAccessServer).GetAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.GatewayAccess/GetAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAccessServer).GetAPIKey(ctx, req.(*GetGatewayAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAccess_UpdateAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGatewayAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAccessServer).UpdateAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.GatewayAccess/UpdateAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAccessServer).UpdateAPIKey(ctx, req.(*UpdateGatewayAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAccess_GetCollaborator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGatewayCollaboratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAccessServer).GetCollaborator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.GatewayAccess/GetCollaborator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAccessServer).GetCollaborator(ctx, req.(*GetGatewayCollaboratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAccess_SetCollaborator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGatewayCollaboratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAccessServer).SetCollaborator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.GatewayAccess/SetCollaborator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAccessServer).SetCollaborator(ctx, req.(*SetGatewayCollaboratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayAccess_ListCollaborators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGatewayCollaboratorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayAccessServer).ListCollaborators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.GatewayAccess/ListCollaborators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayAccessServer).ListCollaborators(ctx, req.(*ListGatewayCollaboratorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GatewayAccess_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.GatewayAccess",
	HandlerType: (*GatewayAccessServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRights",
			Handler:    _GatewayAccess_ListRights_Handler,
		},
		{
			MethodName: "CreateAPIKey",
			Handler:    _GatewayAccess_CreateAPIKey_Handler,
		},
		{
			MethodName: "ListAPIKeys",
			Handler:    _GatewayAccess_ListAPIKeys_Handler,
		},
		{
			MethodName: "GetAPIKey",
			Handler:    _GatewayAccess_GetAPIKey_Handler,
		},
		{
			MethodName: "UpdateAPIKey",
			Handler:    _GatewayAccess_UpdateAPIKey_Handler,
		},
		{
			MethodName: "GetCollaborator",
			Handler:    _GatewayAccess_GetCollaborator_Handler,
		},
		{
			MethodName: "SetCollaborator",
			Handler:    _GatewayAccess_SetCollaborator_Handler,
		},
		{
			MethodName: "ListCollaborators",
			Handler:    _GatewayAccess_ListCollaborators_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/gateway_services.proto",
}

// GatewayConfiguratorClient is the client API for GatewayConfigurator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GatewayConfiguratorClient interface {
	PullConfiguration(ctx context.Context, in *PullGatewayConfigurationRequest, opts ...grpc.CallOption) (GatewayConfigurator_PullConfigurationClient, error)
}

type gatewayConfiguratorClient struct {
	cc *grpc.ClientConn
}

func NewGatewayConfiguratorClient(cc *grpc.ClientConn) GatewayConfiguratorClient {
	return &gatewayConfiguratorClient{cc}
}

func (c *gatewayConfiguratorClient) PullConfiguration(ctx context.Context, in *PullGatewayConfigurationRequest, opts ...grpc.CallOption) (GatewayConfigurator_PullConfigurationClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GatewayConfigurator_serviceDesc.Streams[0], "/ttn.lorawan.v3.GatewayConfigurator/PullConfiguration", opts...)
	if err != nil {
		return nil, err
	}
	x := &gatewayConfiguratorPullConfigurationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GatewayConfigurator_PullConfigurationClient interface {
	Recv() (*Gateway, error)
	grpc.ClientStream
}

type gatewayConfiguratorPullConfigurationClient struct {
	grpc.ClientStream
}

func (x *gatewayConfiguratorPullConfigurationClient) Recv() (*Gateway, error) {
	m := new(Gateway)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GatewayConfiguratorServer is the server API for GatewayConfigurator service.
type GatewayConfiguratorServer interface {
	PullConfiguration(*PullGatewayConfigurationRequest, GatewayConfigurator_PullConfigurationServer) error
}

// UnimplementedGatewayConfiguratorServer can be embedded to have forward compatible implementations.
type UnimplementedGatewayConfiguratorServer struct {
}

func (*UnimplementedGatewayConfiguratorServer) PullConfiguration(req *PullGatewayConfigurationRequest, srv GatewayConfigurator_PullConfigurationServer) error {
	return status.Errorf(codes.Unimplemented, "method PullConfiguration not implemented")
}

func RegisterGatewayConfiguratorServer(s *grpc.Server, srv GatewayConfiguratorServer) {
	s.RegisterService(&_GatewayConfigurator_serviceDesc, srv)
}

func _GatewayConfigurator_PullConfiguration_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullGatewayConfigurationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GatewayConfiguratorServer).PullConfiguration(m, &gatewayConfiguratorPullConfigurationServer{stream})
}

type GatewayConfigurator_PullConfigurationServer interface {
	Send(*Gateway) error
	grpc.ServerStream
}

type gatewayConfiguratorPullConfigurationServer struct {
	grpc.ServerStream
}

func (x *gatewayConfiguratorPullConfigurationServer) Send(m *Gateway) error {
	return x.ServerStream.SendMsg(m)
}

var _GatewayConfigurator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.GatewayConfigurator",
	HandlerType: (*GatewayConfiguratorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullConfiguration",
			Handler:       _GatewayConfigurator_PullConfiguration_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "lorawan-stack/api/gateway_services.proto",
}

func (m *PullGatewayConfigurationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PullGatewayConfigurationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PullGatewayConfigurationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.FieldMask.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGatewayServices(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.GatewayIdentifiers.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGatewayServices(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintGatewayServices(dAtA []byte, offset int, v uint64) int {
	offset -= sovGatewayServices(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedPullGatewayConfigurationRequest(r randyGatewayServices, easy bool) *PullGatewayConfigurationRequest {
	this := &PullGatewayConfigurationRequest{}
	v1 := NewPopulatedGatewayIdentifiers(r, easy)
	this.GatewayIdentifiers = *v1
	v2 := types.NewPopulatedFieldMask(r, easy)
	this.FieldMask = *v2
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyGatewayServices interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneGatewayServices(r randyGatewayServices) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringGatewayServices(r randyGatewayServices) string {
	v3 := r.Intn(100)
	tmps := make([]rune, v3)
	for i := 0; i < v3; i++ {
		tmps[i] = randUTF8RuneGatewayServices(r)
	}
	return string(tmps)
}
func randUnrecognizedGatewayServices(r randyGatewayServices, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldGatewayServices(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldGatewayServices(dAtA []byte, r randyGatewayServices, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateGatewayServices(dAtA, uint64(key))
		v4 := r.Int63()
		if r.Intn(2) == 0 {
			v4 *= -1
		}
		dAtA = encodeVarintPopulateGatewayServices(dAtA, uint64(v4))
	case 1:
		dAtA = encodeVarintPopulateGatewayServices(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateGatewayServices(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateGatewayServices(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateGatewayServices(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateGatewayServices(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(v&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *PullGatewayConfigurationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.GatewayIdentifiers.Size()
	n += 1 + l + sovGatewayServices(uint64(l))
	l = m.FieldMask.Size()
	n += 1 + l + sovGatewayServices(uint64(l))
	return n
}

func sovGatewayServices(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGatewayServices(x uint64) (n int) {
	return sovGatewayServices((x << 1) ^ uint64((int64(x) >> 63)))
}
func (this *PullGatewayConfigurationRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PullGatewayConfigurationRequest{`,
		`GatewayIdentifiers:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.GatewayIdentifiers), "GatewayIdentifiers", "GatewayIdentifiers", 1), `&`, ``, 1) + `,`,
		`FieldMask:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.FieldMask), "FieldMask", "types.FieldMask", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGatewayServices(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *PullGatewayConfigurationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGatewayServices
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PullGatewayConfigurationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PullGatewayConfigurationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGatewayServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGatewayServices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGatewayServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GatewayIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldMask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGatewayServices
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGatewayServices
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGatewayServices
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FieldMask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGatewayServices(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGatewayServices
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGatewayServices
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGatewayServices(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGatewayServices
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGatewayServices
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGatewayServices
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGatewayServices
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGatewayServices
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGatewayServices
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGatewayServices        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGatewayServices          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGatewayServices = fmt.Errorf("proto: unexpected end of group")
)
